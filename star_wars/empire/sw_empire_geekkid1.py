# -*- coding: utf-8 -*-
"""ImperialShell.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LCipxFoe0_Du61ac-vqNgkZTrJeOPPd
"""

import sys, cmd, time

class ICCD(cmd.Cmd):
  intro = "Welcome to the Imperial Command and Control Database.\nIt is illegal to use this system without authorization from an Imperial officer, or from a non-Imperial computer terminal.\nUse 'help' to view all valid commands.\n"
  prompt = "iccd.guest > "
  alias = "guest"
  access = False
  file = None
  target = "Alderaan"
  
  # --- Command Methods --- #
  def do_access(self,arg):
    '\nAccess the Imperial File System connected to the ICCD terminals. Can be used to access structural files, combat logs, and personell files and records.\nRequires level 3 security clearance to use.\nType "access <section> <topic>"\n'
    if self.access:
      arr = str(arg).split()
      if arr[0] == 'structural' or arr[0] == 'structure' or arr[0] == 'schematics':
        if arr[1] == 'stardust' or arr[1] == 'death-star' or arr[1] == 'Stardust':
          time.sleep(0.7)
          print("\n1 Structural files found:")
          time.sleep(0.4)
          print("Lunar-Class heavy weapons project codename Stardust.\n")
      elif arr[0] == 'combat' or arr[0] == 'combat-logs':
        print("placeholder 2")
      elif arr[0] == 'personell':
        print("placeholder 3")
      elif arr[0] == 'systems':
        print("placeholder 4")
      else:
        print("\nSection not found: " + arr[0] + "\n")
    else:
      print("ERROR: This profile does not have the correct security clearance to access this command.")
      
  def do_whoami(self,arg):
    '\nReturns the name of the ICCD security profile currently in use by this session.\nType "whoami"\n'
    print("User: "+self.alias)

  def do_login(self,arg):
    '\nLog in to an existing ICCD security profile.\nType "login <name>"\n'
    if str(arg) == 'vader' or str(arg) == 'TK421' or str(arg) == 'tarkin' or str(arg) == 'krennic' or str(arg) == 'erso':
      self.access = True
    else:
      self.access = False
    self.prompt = "iccd."+str(arg)+" > "
    self.alias = str(arg)

  def do_logout(self,arg):
    '\nLog out of the current ICCD security profile. Will raise error if no profile is active.\nType "logout"\n'
    if self.alias == 'guest':
      print('\nERROR: No profile active. Aborting process "logout".\n')
    else:
      self.do_login('guest')

  def do_aim(self,arg):
    '\nAlign heavy weapons systems to a specified target (case sensitive).\nType "aim <target>"\n'
    if str(arg) == 'Tatooine' or str(arg) == 'Dantooine' or str(arg) == 'Alderaan' or str(arg) == 'Endor' or str(arg) == 'Yavin' or str(arg) == 'Hoth' or str(arg) == 'Coruscant':
      self.target = str(arg)
    else:
      print('\nSorry, that target is either not valid, or is not in current target directory. Please try again later.\n')
      return
    print('\nAligning weapons systems to target ' + str(arg) + '...')
    time.sleep(1)
    print('Weapons aligned.\n')
    
  def do_fire(self,arg):
    '\nActivate heavy weapons systems and fire at the target specified by the aim command. Requires security clearance.\nType "fire"\n'
    if self.target == '':
      print("\nNo target selected\n")
    elif not self.access:
      print("\nAccess Denied\n")
    else:
      print("\nBeginning firing sequence for target "+ self.target + "...")
      time.sleep(0.7)
      print("Warming up weapons systems...")
      time.sleep(0.9)
      print("Done.")
      time.sleep(0.7)
      print("Performing last-minute adjustments...")
      time.sleep(0.9)
      print("Done.")
      time.sleep(0.7)
      print("Priming weapon...")
      time.sleep(0.9)
      print("Done.")
      time.sleep(0.7)
      print("Commencing primary ignition...")
      time.sleep(0.5)
      print("Adjusting power...")
      time.sleep(0.7)
      print("Firing...")
      time.sleep(1.7)
      print("FATAL ERROR: Weapon systems no longer online. Primary weapons computer not found.")
      time.sleep(0.6)
      print("Last known location: Yavin System\n")

  def do_exit(self, arg):
    '\nClose the ICCD session.\n'
    print('\nClosing Database access session...')
    time.sleep(1.2)
    print('Done')
    self.close()
    return True
  
  # --- Help Topic Methods --- #
  def help_about(self):
    print('\nThis is a simple command-line interpreter based on the Galactic Empire from Star Wars.')
    print('It was developed originally by Isaac Blum and is part of his Pop-Culture command line repository.')
    print('I hope you enjoy it! I put a lot of work into making this thing the overcomplicated piece of software it is.\n')
  
  # --- Misc Other Required Methods --- #
  def close(self):
        if self.file:
            self.file.close()
            self.file = None
  
  def emptyline(self):
    pass
if __name__ == '__main__':
  ICCD().cmdloop()